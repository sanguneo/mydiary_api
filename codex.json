{
  "repo": {
    "name": "diary-backend-bun-hono-supabase",
    "description": "Backend for Private Emotion Diary - Bun + Hono API with Supabase (Auth + Postgres). Includes user profiles, encrypted entries, admin console APIs, audit logging, RLS policies, and Postman collection for testing.",
    "visibility": "private",
    "license": "MIT"
  },
  "tech_stack": {
    "runtime": "Bun",
    "framework": "Hono",
    "database": "Supabase (Postgres)",
    "auth": "Supabase Auth (client) + token validation on server",
    "encryption": "Client-side AES-GCM for entry text; server provides wrap/unwrap helper using SERVER_WRAP_KEY (no external KMS).",
    "language": "TypeScript",
    "other_libs": [
      "@supabase/supabase-js",
      "nanoid",
      "bcryptjs",
      "jose",
      "dotenv",
      "zod"
    ],
    "key_management": "Server-side wrapping using SERVER_WRAP_KEY (dev). In production store keys in a secure secrets manager and enforce rotation."
  },
  "project_structure": {
    "root": [
      "package.json",
      "bun.lockb",
      "tsconfig.json",
      ".env.example",
      "README.md",
      "src/",
      "migrations/",
      "scripts/",
      "postman/",
      "test/"
    ],
    "src": {
      "index.ts": "start server (bun serve) - loads app.fetch from app.ts",
      "app.ts": "Hono app, route mounting",
      "controllers/": "business logic per resource (authInit, entries, admin)",
      "routes/": "Hono route declarations (public + protected + admin)",
      "middleware/": "auth middleware (validate via supabase /auth/v1/user), admin middleware (check admin_roles)",
      "services/": {
        "supabaseClient.ts": "initialize supabase client with service_role key (read from Codex environment variables)",
        "crypto.ts": "wrap/unwrap helpers using SERVER_WRAP_KEY (AES-GCM) and client-side AES helpers; KMS adapters removed",
        "audit.ts": "audit log helper"
      },
      "types/": "shared TypeScript types (User, Entry, Profile, ApiResponse)",
      "utils/": "helpers (date mapping for 1yr/2yr mapping, validation)"
    }
  },
  "environment": {
    "note": "Codex has been configured with the required environment variables â€” the server reads these from the process environment. Do not store service_role or secret values in client code or in repo.",
    "required": [
      "SUPABASE_URL",
      "SUPABASE_ANON_KEY",
      "SUPABASE_SERVICE_KEY",
      "SUPABASE_JWT_SECRET (optional, if verifying locally)",
      "SERVER_WRAP_KEY (base64 32 bytes) - used for server-side wrapping/unwrapping when not using external KMS",
      "PORT (default 3000)"
    ],
    "usage": "The code must read secrets from process.env (Codex-provided env). Example: process.env.SUPABASE_SERVICE_KEY. .env files are only for local testing; in your Codex-hosted environment variables are already set."
  },
  "migrations": [
    {
      "filename": "001_create_extensions_and_core_tables.sql",
      "content": "-- create extension and core tables\ncreate extension if not exists \"pgcrypto\";\n\n-- profiles: additional user metadata for auth.users\ncreate table if not exists profiles (\n  id uuid primary key references auth.users (id) on delete cascade,\n  email text,\n  account_key_meta jsonb,\n  settings jsonb default '{}'::jsonb,\n  is_disabled boolean default false,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\n-- entries : encrypted diary entries\ncreate table if not exists entries (\n  id uuid primary key default gen_random_uuid(),\n  user_id uuid references auth.users (id) on delete cascade,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now(),\n  entry_date date not null,\n  entry_time time,\n  is_locked boolean default false,\n  ciphertext text not null,\n  iv text not null,\n  wrapped_entry_key text,\n  meta jsonb,\n  constraint entries_user_date_unique unique (user_id, id)\n);\n\ncreate index if not exists idx_entries_user_date on entries (user_id, entry_date);\n\n-- admin_roles\ncreate table if not exists admin_roles (\n  user_id uuid references auth.users(id),\n  role text,\n  created_at timestamptz default now(),\n  primary key (user_id)\n);\n\n-- audit_logs\ncreate table if not exists audit_logs (\n  id uuid primary key default gen_random_uuid(),\n  actor_id uuid,\n  target_user_id uuid,\n  action text,\n  details jsonb,\n  created_at timestamptz default now()\n);\n\ncreate index if not exists idx_audit_actor on audit_logs(actor_id);\ncreate index if not exists idx_audit_target on audit_logs(target_user_id);\n"
    },
    {
      "filename": "002_rls_and_policies.sql",
      "content": "-- Enable RLS and create policies\nalter table profiles enable row level security;\nalter table entries enable row level security;\nalter table audit_logs enable row level security;\n\n-- profiles owner: users can manage their own profile\ncreate policy profiles_owner on profiles\n  for all\n  using ( auth.uid() = id )\n  with check ( auth.uid() = id );\n\n-- entries owner: users can manage their own entries\ncreate policy entries_owner on entries\n  for all\n  using ( auth.uid() = user_id )\n  with check ( auth.uid() = user_id );\n\n-- allow admin to view profiles (select only)\ncreate policy profiles_admin on profiles\n  for select\n  using ( exists (select 1 from admin_roles ar where ar.user_id = auth.uid()) );\n\n-- audit_logs: only admin can read/write\ncreate policy audit_admin_only on audit_logs\n  for all\n  using ( exists (select 1 from admin_roles ar where ar.user_id = auth.uid()) );\n"
    }
  ],
  "api_spec": {
    "base_url": "https://<YOUR_SERVER_HOST>:<PORT>/api",
    "auth": "Supabase Auth token â€” Authorization: Bearer <access_token> (server validates via /auth/v1/user or local JWT verification if configured)",
    "endpoints": [
      {
        "id": "init_profile",
        "method": "POST",
        "path": "/api/init",
        "auth": "Bearer token (supabase access_token)",
        "description": "Initialize server-side profile record and create account_key_meta. Server will generate account master key and wrap it using SERVER_WRAP_KEY (no external KMS).",
        "request": { "body": {} },
        "response": { "200": { "ok": true, "message": "initialized" } }
      },
      {
        "id": "list_entries_by_date",
        "method": "GET",
        "path": "/api/entries?date=YYYY-MM-DD",
        "auth": "Bearer token",
        "description": "Returns entries metadata (no plaintext) for the date. RLS ensures user sees only own rows.",
        "response": {
          "200": {
            "entries": [
              {
                "id": "<uuid>",
                "entry_date": "YYYY-MM-DD",
                "entry_time": "HH:MM",
                "is_locked": true,
                "meta": {}
              }
            ]
          }
        }
      },
      {
        "id": "create_entry",
        "method": "POST",
        "path": "/api/entries",
        "auth": "Bearer token",
        "description": "Create new encrypted entry. Client sends ciphertext, iv, and wrapped_entry_key (server-side wrap using SERVER_WRAP_KEY is available via /api/keys/wrap).",
        "request": {
          "body": {
            "entry_date": "YYYY-MM-DD",
            "entry_time": "HH:MM",
            "ciphertext": "base64 string",
            "iv": "base64 string",
            "wrapped_entry_key": "base64 string (optional)",
            "is_locked": "boolean",
            "meta": { "emotion": "ðŸ˜€", "tags": [] }
          }
        },
        "response": { "201": { "ok": true, "id": "<entry id>" } }
      },
      {
        "id": "get_entry",
        "method": "GET",
        "path": "/api/entries/:id",
        "auth": "Bearer token",
        "description": "Returns ciphertext, iv, wrapped_entry_key, meta, is_locked. Server does NOT return plaintext.",
        "response": {
          "200": {
            "id": "<uuid>",
            "ciphertext": "...",
            "iv": "...",
            "wrapped_entry_key": "...",
            "is_locked": true,
            "meta": {}
          }
        }
      },
      {
        "id": "wrap_entry_key",
        "method": "POST",
        "path": "/api/keys/wrap",
        "auth": "Bearer token",
        "description": "Wraps a base64 entry_key using SERVER_WRAP_KEY (server-side AES-GCM wrap). This endpoint is the production wrapping flow in the current no-KMS setup. The server returns a wrapped_key_base64 that the client stores alongside ciphertext.",
        "request": { "body": { "entry_key_base64": "..." } },
        "response": { "200": { "wrapped_key_base64": "..." } }
      },
      {
        "id": "admin_list_users",
        "method": "GET",
        "path": "/api/admin/users?page=1&limit=50",
        "auth": "Bearer token (admin user)",
        "description": "Admin-only: returns user list with limited profile fields (id, email, created_at, is_disabled, settings).",
        "response": { "200": { "users": [ { "id": "...", "email": "...", "is_disabled": false, "created_at": "..." } ] } }
      },
      {
        "id": "admin_suspend_user",
        "method": "POST",
        "path": "/api/admin/users/:id/suspend",
        "auth": "Bearer token (admin)",
        "description": "Suspends user (sets profiles.is_disabled true) and writes audit log.",
        "request": { "body": { "reason": "support_reason" } },
        "response": { "200": { "ok": true } }
      },
      {
        "id": "admin_get_user_entries_meta",
        "method": "GET",
        "path": "/api/admin/users/:id/entries?date=YYYY-MM-DD",
        "auth": "Bearer token (admin)",
        "description": "Admin-only: returns entries metadata for a user on a date; ciphertext is not returned by default.",
        "response": { "200": { "entries": [ { "id": "...", "entry_date": "...", "entry_time": "...", "is_locked": true } ] } }
      },
      {
        "id": "admin_request_unwrap",
        "method": "POST",
        "path": "/api/admin/request-unwrap",
        "auth": "Bearer token (admin)",
        "description": "Admin may request a key unwrap for support/legal purpose. This endpoint inserts an audit log record and initiates a controlled unwrap workflow. DO NOT return plaintext automatically; unwrap requires explicit manual approval and must be logged.",
        "request": { "body": { "user_id": "...", "entry_id": "...", "reason": "..." } },
        "response": { "200": { "ok": true, "message": "audit created, follow-up required" } }
      }
    ]
  },
  "postman_collection": {
    "info": {
      "name": "Diary Backend - Bun+Hono - Postman Collection",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": "Collection for testing auth/init/entries/admin endpoints. Replace {{base_url}} and set Authorization header with Supabase access_token."
    },
    "item": [
      {
        "name": "Get Supabase User (token verify)",
        "request": {
          "method": "GET",
          "header": [
            { "key": "Authorization", "value": "Bearer {{access_token}}" }
          ],
          "url": "{{supabase_url}}/auth/v1/user"
        }
      },
      {
        "name": "POST /api/init (init profile)",
        "request": {
          "method": "POST",
          "header": [
            { "key": "Authorization", "value": "Bearer {{access_token}}" },
            { "key": "Content-Type", "value": "application/json" }
          ],
          "body": {
            "mode": "raw",
            "raw": "{}"
          },
          "url": "{{base_url}}/api/init"
        }
      },
      {
        "name": "GET /api/entries?date=YYYY-MM-DD",
        "request": {
          "method": "GET",
          "header": [
            { "key": "Authorization", "value": "Bearer {{access_token}}" }
          ],
          "url": "{{base_url}}/api/entries?date={{date}}"
        }
      },
      {
        "name": "POST /api/entries (create encrypted entry)",
        "request": {
          "method": "POST",
          "header": [
            { "key": "Authorization", "value": "Bearer {{access_token}}" },
            { "key": "Content-Type", "value": "application/json" }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entry_date\": \"2025-10-28\",\n  \"entry_time\": \"09:13\",\n  \"ciphertext\": \"<base64Ciphertext>\",\n  \"iv\": \"<base64IV>\",\n  \"wrapped_entry_key\": \"<base64WrappedKey>\",\n  \"is_locked\": false,\n  \"meta\": { \"emotion\": \"ðŸ˜€\" }\n}"
          },
          "url": "{{base_url}}/api/entries"
        }
      },
      {
        "name": "GET /api/entries/:id",
        "request": {
          "method": "GET",
          "header": [
            { "key": "Authorization", "value": "Bearer {{access_token}}" }
          ],
          "url": "{{base_url}}/api/entries/{{entry_id}}"
        }
      },
      {
        "name": "Admin: GET /api/admin/users",
        "request": {
          "method": "GET",
          "header": [
            { "key": "Authorization", "value": "Bearer {{admin_access_token}}" }
          ],
          "url": "{{base_url}}/api/admin/users"
        }
      },
      {
        "name": "Admin: POST /api/admin/users/:id/suspend",
        "request": {
          "method": "POST",
          "header": [
            { "key": "Authorization", "value": "Bearer {{admin_access_token}}" },
            { "key": "Content-Type", "value": "application/json" }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"reason\": \"support - spam\"\n}"
          },
          "url": "{{base_url}}/api/admin/users/{{target_user_id}}/suspend"
        }
      },
      {
        "name": "Admin: POST /api/admin/request-unwrap",
        "request": {
          "method": "POST",
          "header": [
            { "key": "Authorization", "value": "Bearer {{admin_access_token}}" },
            { "key": "Content-Type", "value": "application/json" }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"user_id\": \"{{target_user_id}}\",\n  \"entry_id\": \"{{target_entry_id}}\",\n  \"reason\": \"legal request\"\n}"
          },
          "url": "{{base_url}}/api/admin/request-unwrap"
        }
      }
    ],
    "variable": [
      { "key": "base_url", "value": "http://localhost:3000" },
      { "key": "supabase_url", "value": "https://your-supabase-url.supabase.co" },
      { "key": "access_token", "value": "" },
      { "key": "admin_access_token", "value": "" },
      { "key": "date", "value": "2025-10-28" },
      { "key": "entry_id", "value": "" },
      { "key": "target_user_id", "value": "" },
      { "key": "target_entry_id", "value": "" }
    ]
  },
  "tasks": [
    { "id": 1, "title": "Repo scaffold & basic Bun+Hono app", "description": "Create TypeScript Bun project with Hono app, basic route mount, .env.example, tsconfig, README. Add scripts: start, dev, migrate.", "estimate": "1 day" },
    { "id": 2, "title": "Supabase client & auth middleware", "description": "Implement supabase client (service role key) and auth middleware that validates incoming Bearer token via SUPABASE /auth/v1/user. Attach supabaseUser to context.", "estimate": "0.5 day" },
    { "id": 3, "title": "DB migrations & RLS", "description": "Add migrations folder with SQL files (above). Provide migration script or instructions for Supabase SQL editor.", "estimate": "0.5 day" },
    { "id": 4, "title": "Profile init endpoint (/api/init)", "description": "Create endpoint that checks profiles table and creates wrapped master key using SERVER_WRAP_KEY and stores account_key_meta. For production ensure secret is in Codex environment manager.", "estimate": "0.5 day" },
    { "id": 5, "title": "Entries CRUD (create/list/get)", "description": "Implement entries endpoints: create (store ciphertext/wrapped key), list by date (metadata only), get by id (ciphertext + wrapped blob). Enforce RLS and server-side checks.", "estimate": "1 day" },
    { "id": 6, "title": "Wrap/Unwrap service (SERVER_WRAP_KEY)", "description": "Implement server wrap (AES-GCM with SERVER_WRAP_KEY) and secure unwrap helper. Keep wrapping centralized on server and logged.", "estimate": "1 day" },
    { "id": 7, "title": "Admin endpoints & audit logs", "description": "Admin list users, suspend/reactivate, list user entries metadata, request-unwrap endpoint that logs the request into audit_logs. Implement admin middleware checking admin_roles.", "estimate": "1 day" },
    { "id": 8, "title": "Postman collection & README", "description": "Add generated Postman collection JSON to /postman/collection.json and a README section documenting how to run and test with Postman. Include environment variables and example tokens.", "estimate": "0.5 day" },
    { "id": 9, "title": "Tests & CI", "description": "Unit tests for middleware, route handlers, and a basic integration test (mocked supabase or test project). Add GitHub Actions workflow to run lint and tests.", "estimate": "1 day" },
    { "id": 10, "title": "Hardening & deployment docs", "description": "Document secret management, production env variables, hosting options for Bun (e.g., VPS or Bun Cloud), and database backup strategy.", "estimate": "1 day" }
  ],
  "deliverables": [
    "Git repository with full project scaffold and TypeScript source",
    "migrations SQL files in /migrations",
    "README with quickstart and Postman testing steps",
    "postman/collection.json (Postman v2.1 compatible) in project root",
    "CI workflow (github actions) to run lint & tests",
    "example .env.example and instructions to generate SERVER_WRAP_KEY",
    "documentation for production secret management"
  ],
  "security_and_operational_notes": {
    "production_recommendations": [
      "Do NOT store SUPABASE_SERVICE_KEY in client or committed files; use Codex environment variables or a secure secret store.",
      "Use SERVER_WRAP_KEY only as an interim approach. For higher assurance, store wrapping keys in a strong secrets manager accessible only to the server runtime.",
      "Rotate SERVER_WRAP_KEY regularly and record key rotation events."
    ],
    "audit_requirements": [
      "Every admin action that affects user data or keys must create an audit_logs entry.",
      "Audit logs must include actor_id, target_user_id, action, details, timestamp."
    ],
    "privacy_notes": [
      "By default, admin endpoints return metadata only (no plaintext).",
      "Plaintext unwrapping must be manual, approved, and logged with justification."
    ]
  },
  "notes_for_contributor": "This JSON is intended to be used as a repository creation & implementation brief. Implementers should follow the specified RLS policies, never expose service_role key to clients, and use the Codex-provided environment variables for secrets. Replace SERVER_WRAP_KEY practice with a formal secret management approach when scaling to production."
}
